public class Turtle extends Pet {
  // public class Наследник extends Предок - класс-наследник расширяет функционал класса-предка

  // создание экземпляра класса-потомка означает, что при этом создаётся экземпляр класса-предка
  // значит, в конструкторе потомка должен быть вызван конструктор предка.
  // Если у класса-предка есть конструктор по умолчанию (с пустыми скобками, без аргументов),
  // то проблем нет -- в системном конструкторе по умолчанию для потомка автоматически вызывается
  // конструктор по умолчанию предка.
  // Если у класса-предка нет конструктора по умолчанию, то классу-потомку обязательно нужно
  // написать конструктор, в котором надо вызвать конструктор класса-предка с правильными
  // аргументами
  public Turtle(String name) {
    // служебное слово `super` позволяет получить доступ к классу-предку.
    // super() - вызов конструктора класса-предка.
    super(name);
  }

  public void makeSound() {
    System.out.println("Черепашка по кличке " + getName() + " беззвучно разевает рот");
  }
}

public class Task0SpaceComplexity {

  // Сложность по памяти:
  // - обычные переменные (примитивные типы) и ссылки - O(1)
  // - строки - O(n), n - количество символов
  // - коллекции (списки, множества, очереди, словари...) - O(n), n - количество элементов
  // Рекурсия драматически ухудшает сложность по памяти - O(1) превращает в O(n),
  //   n - глубина рекурсии.
  //   Коллекции не копируются, копируются ссылки - но если внутри рекурсии создавать коллекцию
  // (через new), то O(m) -> O(n * m) - n повторений, в каждом создаётся коллекция размера m
  // При помещении коллекций внутрь коллекций сложность по памяти перемножается - каждый подсчёт
  //   сложности по памяти это подсчёт количества ячеек памяти (~примитивный тип или ссылка)
  // Как исправлять:
  // - Избегать глубокого копирования (создании копии коллекции вместо копии ссылки)
  // - Избегать хранения ненужных данных из прошлого или использовать более эффективную коллекцию
  //   (это не всегда уменьшает асимптотическую сложность (в терминах O(...)), но часто заметно
  //   (в несколько раз) уменьшает реальное использование памяти)
  // - Избегать рекурсии или очень внимательно следить за её глубиной и содержимым методов
  public static void main(String[] args) {
    System.out.println("Hello world!");
  }
}

import java.util.function.Function;

public class Task3Functional {

  // Functional interface - функциональный интерфейс -
  // интерфейс, в котором объявлен только один абстрактный метод.
  // Пример такого интерфейса: компаратор (один абстрактный метод `compare()`)

  // Смысл названия: интерфейс, который определяет один-единственный метод.
  // Метод называется функцией, и раз интерфейс только для этого, он становится функциональным.

  // There are several basic function shapes, including:
  // - Function (unary function from T to R),
  // - Consumer (unary function from T to void),
  // - Predicate (unary function from T to boolean),
  // - Supplier (nullary function to R).
  // Существует несколько основных форм функций, в том числе:
  // - Function (унарная функция от T в R),
  // - Consumer (унарная функция от T в ничто),
  // - Predicate (унарная функция от T в логическое значение (boolean)),
  // - Supplier (нулевая функция в R).

  // nullary function == ноль аргументов
  // unary function == один аргумент
  // Своими словами:
  // - Function (функция) - превращает единственный аргумент (тип T) в результат (тип R),
  //   назначение - преобразование (строки в число, объекта в строку...)
  // - Consumer (потребитель) - потребляет аргумент и ничего не возвращает, превращает T в void,
  //   назначение - финальная обработка, например, вывод на экран или запись в файл
  // - Predicate (предикат) - превращение аргумента в boolean (true/false),
  //   назначение - условие, обычно фильтр
  // - Supplier (поставщик) - превращает ничто в результат (R) - генерирует результат из ничего,
  //   назначение - создание новых объектов (например, чтение с клавиатуры)

  // Функциональный интерфейс для методов, которые ничего не получают и ничего не возвращают:
  // `Runnable`
}

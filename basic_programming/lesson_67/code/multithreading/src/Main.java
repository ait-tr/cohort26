public class Main {

  // Следующие модули уже не для начинающих, потому что вы уже не начинающие:
  // - будут сложнее (меньше объяснений и плотнее материал)
  // - меньше лекций и больше самостоятельного изучения документации
  // - изучение теории частично (!) должно быть самостоятельным
  // что изучить дополнительно:
  // - английский
  // - алгоритмы и структуры данных (сложно, опционально)
  // - математика (опционально)
  // - общее устройство компьютера и сетей (опционально)
  // что мы изучим в ближайшие дни:
  // Многозадачность, одновременное выполнение компьютером нескольких команд
  // - многопоточность (multithreading, concurrency) и параллелизм (parallelism)
  // - многопоточность - асинхронное (asynchronous) выполнение
  // - параллелизм - синхронное (synchronous) выполнение
  // Асинхронность может происходить даже на одном ядре процессора.
  // Синхронность - "настоящее" одновременное выполнение - происходит на разных ядрах процессора.
  // Мы изучим только асинхронность.
  public static void main(String[] args) {
    System.out.println("Hello world!");
    // 1-й способ - создание наследника класса Thread
    Thread thread = new MyThread();
    // 2-й способ - создание класса Thread с экземпляром класса, реализующего
    // интерфейс Runnable, в качестве аргумента конструктора
    Runnable runnable = new MyOtherThread();
    Thread otherThread = new Thread(runnable);
    thread.start(); // отдельный запуск потока, начнётся асинхронное выполнение thread.run()
    otherThread.start();
//    while (thread.isAlive()) { // пока поток thread не закончит выполнение
//      System.out.println("Waiting...");
//    }
    // здесь поток thread уже завершился
    for (int i = 0; i < 100; ++i) {
      System.out.println("Вывод в основном потоке");
    }
  }
}
